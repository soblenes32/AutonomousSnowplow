package com.asl.snowplow.service;

import java.awt.Point;
import java.io.File;
import java.util.Date;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import javax.inject.Inject;

import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import com.asl.snowplow.model.LidarPoint;
import com.asl.snowplow.model.VehicleState;
import com.asl.snowplow.model.WorldState;
import com.asl.snowplow.rplidar.RpLidarHighLevelDriver;
import com.asl.snowplow.rplidar.RpLidarScan;

@Service
public class RplidarService{
	@Inject
	WorldState worldState;

	private RpLidarHighLevelDriver driver = null;
	private boolean initSuccess = false;
	private double mm[] = new double[ RpLidarScan.N ];
	private Date lastScanThreshold = new Date();
	
	@PostConstruct
	private void init(){
		System.setProperty("gnu.io.rxtx.SerialPorts", "/dev/arduino" + File.pathSeparator + "/dev/rplidar");
		driver = new RpLidarHighLevelDriver();
		initSuccess = driver.initialize("/dev/rplidar",100);
		if(initSuccess) {
			System.out.println("Rplidar connection initialized");
		}else {
			System.out.println("Failed to initialize");
		}
		initSuccess = true;
	}
	
	@PreDestroy
	private void close(){
		driver.stop();
		initSuccess = false;
	}
	
	@Scheduled(fixedRate=50)
	private void pollScan() {
		int scanCount = 0;
		if(initSuccess) {
			VehicleState vehicleState = worldState.getVehicleState();
			RpLidarScan scan = new RpLidarScan();
			if (!driver.blockCollectScan(scan, 0)) { //10000
				System.out.println("Scan wasn't ready yet");
			} else {
				Date scanTime = null;
				scan.convertMilliMeters(mm);
				//RpLidarScan.N: rplidar data is stored in a sparse array of 360 degrees * 64 degreefractions
				for (int j = 0; j < RpLidarScan.N; j++) {
					if( scan.distance[j] != 0 && (scanTime == null || scanTime.after(lastScanThreshold))) {
						if(scanTime == null) 
							scanTime = new Date(scan.time[j]);
						scanCount++;
						//System.out.println("Angle: " + (j/64) +", Distance (mm): " + mm[j]);
						double angle = (j/64) + vehicleState.getHeadingCalibration();
						
						int y = (int) (Math.sin(Math.toRadians(angle)) * mm[j]) + vehicleState.getPosition().y;
						int x = (int) (Math.cos(Math.toRadians(angle)) * mm[j]) + vehicleState.getPosition().x;
						Point p = new Point(x,y);
						
						//System.out.println("object at coordinates: " + p.toString());
						
						LidarPoint ld = new LidarPoint(p, scanTime);
						
						worldState.addLidarDetectionPoint(ld);
					}
				}
				lastScanThreshold = new Date(scanTime.getTime()+100);
				System.out.println("Scan count in 1/20 second: " + scanCount);
				lastScanThreshold = new Date();
			}
		}else {
			//Lidar not initialized
		}
	}
}
